services:
  - type: web
    name: hasura
    env: docker
    dockerfilePath: ./hasura/Dockerfile
    dockerContext: ./hasura
    # See https://hasura.io/docs/1.0/graphql/core/api-reference/health.html
    healthCheckPath: /healthz
    envVars:
      - key: HASURA_GRAPHQL_DATABASE_URL
        fromDatabase:
          name: elefante
          property: connectionString
      - key: HASURA_GRAPHQL_ADMIN_SECRET
        generateValue: true
      - key: API_HOST
        fromService:
          name: api
          type: web
          property: host

      # If we don't set this then render will incorrectly infer it as 9691 since
      # the hasura/graphql-engine:vX.X.X.cli-migrations-v2 image first starts a
      # temporary server to run the appropriate migrations and metadata updates.
      - key: PORT
        value: 8080

  - type: web
    name: api
    env: rust
    buildCommand: cargo build --release --manifest-path=api/Cargo.toml
    startCommand: cargo run --release --manifest-path=api/Cargo.toml
    healthCheckPath: /healthz
    envVars:
      - key: HASURA_HOSTPORT
        fromService:
          name: hasura
          type: web
          property: hostport
      - key: HASURA_GRAPHQL_ADMIN_SECRET
        fromService:
          name: hasura
          type: web
          envVarKey: HASURA_GRAPHQL_ADMIN_SECRET
      - key: GITHUB_OAUTH_CLIENT_ID
        sync: false
      - key: GITHUB_OAUTH_CLIENT_SECRET
        sync: false
      - key: API_PASETO_SECRET_KEY
        # generateValue is problematic because we need the secret key to be a
        # specific length.
        sync: false

      - key: MIRRORS_DIR
        value: "/tmp/mirrors"
      - key: RUST_LIB_BACKTRACE
        value: 1
      - key: RUST_BACKTRACE
        value: "full"
      - key: RUST_LOG
        value: "api=trace"

databases:
  # This is the Render name of the database, not the postgres name of the
  # database. Render may add a suffix. In our case that doesn't seem to be the
  # case: both are "elefante".
  - name: elefante
