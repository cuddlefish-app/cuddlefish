services:
  - name: cf-hasura
    type: web
    env: docker
    dockerfilePath: ./hasura/Dockerfile
    dockerContext: ./hasura
    # See https://hasura.io/docs/1.0/graphql/core/api-reference/health.html
    healthCheckPath: /healthz
    envVars:
      - key: HASURA_GRAPHQL_DATABASE_URL
        fromDatabase:
          name: elefante
          property: connectionString
      - key: HASURA_GRAPHQL_ADMIN_SECRET
        generateValue: true

      # If we don't set this then render will incorrectly infer it as 9691 since
      # the hasura/graphql-engine:vX.X.X.cli-migrations-v3 image first starts a
      # temporary server to run the appropriate migrations and metadata updates.
      - key: PORT
        value: 8080

      # Rust API stuff
      - key: API_HOST
        fromService:
          name: cf-api
          type: web
          property: host
      # Render is incredibly buggy/broken. Ports are all wrong. See https://community.render.com/t/service-cannot-reach-itself-via-host-port-combo/755/4?u=samuela
      - key: API_PORT
        value: 10000

      - key: API_SECRET
        fromService:
          name: cf-next
          type: web
          envVarKey: API_SECRET

      - key: NEXT_HOST
        fromService:
          name: cf-next
          type: web
          property: host
      - key: NEXT_PORT
        fromService:
          name: cf-next
          type: web
          property: port

  - name: cf-api
    type: web
    env: rust
    # See https://community.render.com/t/rust-environment-build-caching-doesnt-work-with-monorepos/910/5?u=samuela.
    buildCommand: cargo build --release --manifest-path=./api/Cargo.toml --target-dir=./target
    startCommand: cargo run --release --manifest-path=./api/Cargo.toml --target-dir=./target
    healthCheckPath: /healthz
    envVars:
      # See https://render.com/docs/rust-toolchain
      - key: RUSTUP_TOOLCHAIN
        value: 1.56.1

      # Hasura stuff
      - key: HASURA_HOST
        fromService:
          name: cf-hasura
          type: web
          property: host
      # See https://community.render.com/t/service-cannot-reach-itself-via-host-port-combo/755/4?u=samuela.
      - key: HASURA_PORT
        value: 10000
      - key: HASURA_GRAPHQL_ADMIN_SECRET
        fromService:
          name: cf-hasura
          type: web
          envVarKey: HASURA_GRAPHQL_ADMIN_SECRET

      # Necessary for looking up commits.
      - key: GITHUB_API_TOKEN
        sync: false

      # Necessary for the GitHub OAuth signin flow.
      - key: GITHUB_OAUTH_CLIENT_ID
        sync: false
      - key: GITHUB_OAUTH_CLIENT_SECRET
        sync: false
      - key: API_PASETO_SECRET_KEY
        # generateValue is problematic because we need the secret key to be a
        # specific length.
        sync: false

      - key: MIRRORS_DIR
        value: "/tmp/cf-mirrors"
      - key: RUST_LIB_BACKTRACE
        value: 1
      - key: RUST_BACKTRACE
        value: "full"
      - key: RUST_LOG
        value: "api=trace"

  - name: cf-next
    type: web
    env: node
    # See https://stackoverflow.com/questions/60065865/is-there-a-way-of-making-npm-ci-install-devdependencies-or-npm-install-not
    buildCommand: cd next/ && npm ci --include=dev && npm run build
    startCommand: cd next/ && npm run start
    healthCheckPath: /api/healthz
    envVars:
      # Hasura stuff
      - key: HASURA_HOST
        fromService:
          name: cf-hasura
          type: web
          property: host
      - key: HASURA_PORT
        value: 10000
      - key: HASURA_GRAPHQL_ADMIN_SECRET
        fromService:
          name: cf-hasura
          type: web
          envVarKey: HASURA_GRAPHQL_ADMIN_SECRET

      - key: API_SECRET
        generateValue: true
      - key: SENDGRID_API_KEY
        sync: false
      - key: GITHUB_API_TOKEN
        sync: false

databases:
  # This is the Render name of the database, not the postgres name of the
  # database. Render may add a suffix. In our case that doesn't seem to be the
  # case: both are "elefante".
  - name: elefante
