# Development config for postgres/hasura on macOS.

# We need a separate config file since `network_mode: host` doesn't work on
# macOS. See https://github.com/docker/for-mac/issues/155.

# See https://docs.docker.com/compose/compose-file/#compose-and-docker-compatibility-matrix for the latest version info.
version: "3.9"
services:
  postgres:
    image: postgres:14
    expose:
      - "5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword

  graphql-engine:
    # See https://hasura.io/docs/latest/graphql/core/migrations/advanced/auto-apply-migrations.html
    # image: hasura/graphql-engine:v2.0.10.cli-migrations-v3

    # See https://github.com/hasura/graphql-engine/issues/7676#issuecomment-954439822
    build: .
    depends_on:
      - "postgres"
    ports:
      - "8080:8080"
    volumes:
      - type: bind
        source: ./migrations
        target: /hasura-migrations
      - type: bind
        source: ./metadata
        target: /hasura-metadata
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres

      # Never enable the console! Use `hasura console` instead. See https://hasura.io/docs/latest/graphql/core/migrations/migrations-setup.html#step-0-disable-the-console-on-the-server
      # and https://github.com/hasura/graphql-engine/issues/7728.
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"

      # Default logging minus websocket-log:
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log"

      # Don't enable DEV_MODE in prod! See https://hasura.io/docs/latest/graphql/core/deployment/graphql-engine-flags/config-examples.html#dev-mode
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: hasurasecret

      # On macOS, there's this thing where you need to do `host.docker.internal`
      # to escape Docker networking. It doesn't work on Linux however. Much
      # easier to use `network_mode: host` on Linux. Unfortunately I am not
      # aware of a cross-platform solution.
      # See eg https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds.

      # In prod, we use the cli-migrations-v3 version of the Docker image and
      # these values are set in the Dockerfile.
      HASURA_GRAPHQL_AUTH_HOOK: http://host.docker.internal:3001/hasura_auth_webhook
      API_GRAPHQL_ENDPOINT: http://host.docker.internal:3001/graphql

# See https://docs.docker.com/compose/compose-file/#volumes.
volumes:
  db_data:
