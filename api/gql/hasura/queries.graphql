# We only bother checking the first line, because every file has to have at least one line. We trust that we have the
# rest in there as well. The answer is simply
#    {
#      "data": {
#        "blamelines_by_pk": null
#      }
#    }
# if the blameline doesn't exist. Otherwise null becomes "blamelines".
query LookupExistingBlamelines($commit_hash: String!, $file_path: String!) {
  blamelines_by_pk(
    x_commit_hash: $commit_hash
    x_file_path: $file_path
    x_line_number: 1
  ) {
    __typename
  }
}

mutation UpsertUser(
  $github_node_id: String!
  $github_database_id: Int!
  $github_name: String!
  $github_username: String!
  $email: String
  $access_token: String!
) {
  insert_github_users_one(
    object: {
      github_node_id: $github_node_id
      github_database_id: $github_database_id
      github_name: $github_name
      github_username: $github_username
      email: $email
      access_token: $access_token
    }
    on_conflict: {
      constraint: users_github_id_key
      update_columns: [
        github_node_id
        github_database_id
        github_name
        github_username
        email
        access_token
      ]
    }
  ) {
    github_node_id
  }
}

mutation StartUserSession($user_github_node_id: String!) {
  insert_user_sessions_one(
    object: { user_github_node_id: $user_github_node_id }
  ) {
    id
  }
}

query LookupSession($session_token: uuid!) {
  user_sessions_by_pk(id: $session_token) {
    github_user {
      github_node_id
      access_token
    }
  }
}

mutation EndUserSession($session_token: uuid!) {
  delete_user_sessions_by_pk(id: $session_token) {
    id
  }
}

# See https://github.com/graphql-rust/graphql-client/issues/394 as to why we have to select these fields.
# TODO put this back into StartThread...
mutation UpsertLine(
  $repo_github_node_id: String!
  $commit_hash: String!
  $file_path: String!
  $line_number: Int!
) {
  insert_lines_one(
    object: {
      commit_hash: $commit_hash
      file_path: $file_path
      line_number: $line_number
    }
    on_conflict: {
      constraint: lines_pkey
      # TODO: This is a hack. This is the only way to do an upsert in hasura; we must update at least one field.
      update_columns: [commit_hash, file_path, line_number]
    }
  ) {
    commit_hash
    file_path
    line_number
  }
  insert_commit_github_repo_one(
    object: {
      commit_hash: $commit_hash
      repo_github_node_id: $repo_github_node_id
    }
    on_conflict: {
      constraint: commit_github_repo_pkey
      update_columns: [commit_hash, repo_github_node_id]
    }
  ) {
    commit_hash
    repo_github_node_id
  }
}

mutation StartThread(
  $commit_hash: String!
  $file_path: String!
  $line_number: Int!
  $body: String!
  $author_github_node_id: String!
) {
  insert_threads_one(
    object: {
      original_commit_hash: $commit_hash
      original_file_path: $file_path
      original_line_number: $line_number
      comments: {
        data: [{ author_github_node_id: $author_github_node_id, body: $body }]
      }
    }
  ) {
    id
    comments {
      id
    }
  }
}
